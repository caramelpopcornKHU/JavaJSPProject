/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-08-17 16:15:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.body;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ChatWindow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>웹소켓 채팅</title>\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery CDN 불러오기 -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("/* 채팅 메시지 출력 영역 */\r\n");
      out.write("#chatWindow {\r\n");
      out.write("	border: 1px solid black;\r\n");
      out.write("	width: 270px;\r\n");
      out.write("	height: 310px;\r\n");
      out.write("	overflow: scroll;   /* 메시지가 많으면 스크롤 가능 */\r\n");
      out.write("	padding: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 메시지 입력창 */\r\n");
      out.write("#chatMessage {\r\n");
      out.write("	width: 236px;\r\n");
      out.write("	height: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 전송 버튼 스타일 */\r\n");
      out.write("#sendBtn {\r\n");
      out.write("	height: 30px;\r\n");
      out.write("	position: relative;\r\n");
      out.write("	top: 2px;\r\n");
      out.write("	left: -2px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 채팅 종료 버튼 스타일 */\r\n");
      out.write("#closeBtn {\r\n");
      out.write("	margin-bottom: 3px;\r\n");
      out.write("	position: relative;\r\n");
      out.write("	top: 2px;\r\n");
      out.write("	left: -2px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 닉네임 입력란 (읽기 전용) */\r\n");
      out.write("#chatId {\r\n");
      out.write("	width: 158px;\r\n");
      out.write("	height: 24px;\r\n");
      out.write("	border: 1px solid #AAAAAA;\r\n");
      out.write("	background-color: #EEEEEE;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 본인이 보낸 메시지는 오른쪽 정렬 */\r\n");
      out.write(".myMsg {\r\n");
      out.write("	text-align: right;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- 닉네임 표시 및 채팅 종료 버튼 -->\r\n");
      out.write("닉네임 : <input type=\"text\" id=\"chatId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.chatId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("<button id=\"closeBtn\">채팅 종료</button>\r\n");
      out.write("\r\n");
      out.write("<!-- 채팅 메시지를 표시할 영역 -->\r\n");
      out.write("<div id=\"chatWindow\"></div>\r\n");
      out.write("\r\n");
      out.write("<!-- 메시지 입력창과 전송 버튼 -->\r\n");
      out.write("<div>\r\n");
      out.write("    <input type=\"text\" id=\"chatMessage\">\r\n");
      out.write("    <button id=\"sendBtn\">전송</button>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    // 1. DOM 요소 jQuery 객체로 저장\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    let $chatWindow = $(\"#chatWindow\");   // 메시지 표시 영역\r\n");
      out.write("    let $chatMessage = $(\"#chatMessage\"); // 입력창\r\n");
      out.write("    let chatId = $(\"#chatId\").val();      // 닉네임\r\n");
      out.write("\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    // 2. 웹소켓 연결\r\n");
      out.write("    // --------------------------\r\n");
      out.write("	 let webSocket = new WebSocket(\r\n");
      out.write("	    \"");
      out.print( application.getInitParameter("CHAT_ADDR") );
      out.write("\" \r\n");
      out.write("	    + \"/ChatingServer\"\r\n");
      out.write("	);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    // 3. 메시지 전송 함수\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    function sendMessage() {\r\n");
      out.write("        if($chatMessage.val().trim() === \"\") return; // 빈 메시지 무시\r\n");
      out.write("\r\n");
      out.write("        // 3-1. 본인 메시지 채팅창에 표시 (오른쪽 정렬)\r\n");
      out.write("        $chatWindow.append(\"<div class='myMsg'>\" + $chatMessage.val() + \"</div>\");\r\n");
      out.write("\r\n");
      out.write("        // 3-2. 서버로 메시지 전송 (형식: 닉네임|내용)\r\n");
      out.write("        webSocket.send(chatId + '|' + $chatMessage.val());\r\n");
      out.write("\r\n");
      out.write("        // 3-3. 입력창 초기화\r\n");
      out.write("        $chatMessage.val(\"\");\r\n");
      out.write("\r\n");
      out.write("        // 3-4. 스크롤을 최신 메시지 위치로 이동\r\n");
      out.write("        $chatWindow.scrollTop($chatWindow[0].scrollHeight);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    // 4. 엔터 키 처리\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    $chatMessage.keyup(function(e){\r\n");
      out.write("        if(e.keyCode === 13) sendMessage(); // 엔터 키(13) 입력 시 전송\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    // 5. 전송 버튼 클릭 이벤트\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    $(\"#sendBtn\").click(sendMessage);\r\n");
      out.write("\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    // 6. 채팅 종료 버튼 클릭 이벤트\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    $(\"#closeBtn\").click(function() {\r\n");
      out.write("        webSocket.close();  // 서버 연결 종료\r\n");
      out.write("        window.close();     // 팝업 창 닫기\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // --------------------------\r\n");
      out.write("    // 7. 웹소켓 이벤트 처리\r\n");
      out.write("    // --------------------------\r\n");
      out.write("\r\n");
      out.write("    // 서버와 연결됐을 때\r\n");
      out.write("    webSocket.onopen = function() {\r\n");
      out.write("        $chatWindow.append(\"웹소켓 서버에 연결되었습니다.<br>\");\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    // 서버와 연결 종료됐을 때\r\n");
      out.write("    webSocket.onclose = function() {\r\n");
      out.write("        $chatWindow.append(\"웹소켓 서버가 종료되었습니다.<br>\");\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    // 에러 발생 시\r\n");
      out.write("    webSocket.onerror = function() {\r\n");
      out.write("        alert(\"WebSocket 연결 에러가 발생했습니다.\");\r\n");
      out.write("        $chatWindow.append(\"채팅 중 에러가 발생하였습니다.<br>\");\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    // 메시지를 받았을 때\r\n");
      out.write("    webSocket.onmessage = function(event) {\r\n");
      out.write("        let message = event.data.split(\"|\"); // '닉네임|내용' 구분\r\n");
      out.write("        let sender = message[0];             // 보낸 사람 닉네임\r\n");
      out.write("        let content = message[1];            // 메시지 내용\r\n");
      out.write("\r\n");
      out.write("        if(content != \"\") {\r\n");
      out.write("            // 7-1. 귓속말 처리\r\n");
      out.write("            if(content.match(\"/\")) {\r\n");
      out.write("                if(content.match(\"/\" + chatId)) {\r\n");
      out.write("                    let temp = content.replace((\"/\" + chatId), \"[귓속말] : \");\r\n");
      out.write("                    $chatWindow.append(\"<div>\" + sender + temp + \"</div>\");\r\n");
      out.write("                }\r\n");
      out.write("            } else {\r\n");
      out.write("                // 7-2. 일반 메시지\r\n");
      out.write("                $chatWindow.append(\"<div>\" + sender + \" : \" + content + \"</div>\");\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 스크롤 최신 메시지 위치로 이동\r\n");
      out.write("            $chatWindow.scrollTop($chatWindow[0].scrollHeight);\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
