/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-08-18 11:50:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.body;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class body_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n");
      out.write("<title>FromJ</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/main.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- 중앙 트리거 -->\r\n");
      out.write("	<div class=\"center-wrap\">\r\n");
      out.write("		<div>\r\n");
      out.write("			<button id=\"fromj\" class=\"fromj-btn\" aria-haspopup=\"true\"\r\n");
      out.write("				aria-controls=\"menu\" aria-expanded=\"false\">FromJ</button>\r\n");
      out.write("			<div class=\"subtxt\">눌러서 열기</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<!-- 오버레이 메뉴 -->\r\n");
      out.write("	<section id=\"menu\" class=\"menu\" role=\"dialog\" aria-modal=\"true\"\r\n");
      out.write("		aria-label=\"FromJ 메뉴\">\r\n");
      out.write("		<div class=\"goo\">\r\n");
      out.write("			<a class=\"bubble\" href=\"ESJ.jsp\"> <span class=\"label\">어성준은\r\n");
      out.write("					힘들다</span> <span class=\"dot d1\"></span><span class=\"dot d2\"></span><span\r\n");
      out.write("				class=\"dot d3\"></span>\r\n");
      out.write("			</a> <a class=\"bubble\" href=\"footballMain\"> <span class=\"label\">축구 읽어주는 여자</span>\r\n");
      out.write("				<span class=\"dot d1\"></span><span class=\"dot d2\"></span><span\r\n");
      out.write("				class=\"dot d3\"></span>\r\n");
      out.write("			</a> <a class=\"bubble\" href=\"seoul_food.jsp\"> <span\r\n");
      out.write("				class=\"label\">서울맛집지도</span> <span class=\"dot d1\"></span><span\r\n");
      out.write("				class=\"dot d2\"></span><span class=\"dot d3\"></span>\r\n");
      out.write("			</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"close-hint\">ESC로 닫기</div>\r\n");
      out.write("	</section>\r\n");
      out.write("\r\n");
      out.write("	<!-- Gooey filter -->\r\n");
      out.write("	<svg width=\"0\" height=\"0\" style=\"position: absolute\">\r\n");
      out.write("    <defs>\r\n");
      out.write("      <filter id=\"gooey\">\r\n");
      out.write("        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"6\"\r\n");
      out.write("			result=\"blur\" />\r\n");
      out.write("        <feColorMatrix in=\"blur\"\r\n");
      out.write("			values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 16 -6\" result=\"goo\" />\r\n");
      out.write("        <feBlend in=\"SourceGraphic\" in2=\"goo\" />\r\n");
      out.write("      </filter>\r\n");
      out.write("    </defs>\r\n");
      out.write("  </svg>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "chat.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("    const root    = document.documentElement;\r\n");
      out.write("    const trigger = document.getElementById('fromj');\r\n");
      out.write("    const bubbles = Array.from(document.querySelectorAll('.bubble'));\r\n");
      out.write("\r\n");
      out.write("    /* 반응형 반경: 화면 기준 */\r\n");
      out.write("    function calcRadius(){\r\n");
      out.write("      return Math.max(180, Math.min(280, Math.min(window.innerWidth, window.innerHeight) * 0.28));\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* 화면 정중앙 기준(12·4·8시) 고정 배치 */\r\n");
      out.write("    function positionBubbles(){\r\n");
      out.write("	  const total  = bubbles.length;\r\n");
      out.write("	  const radius = calcRadius();\r\n");
      out.write("	  const cx = window.innerWidth  / 2;\r\n");
      out.write("	  const cy = window.innerHeight / 2;\r\n");
      out.write("	\r\n");
      out.write("	  let angles;\r\n");
      out.write("	\r\n");
      out.write("	  if (total === 3) {\r\n");
      out.write("	    // 특별 규칙: 12시, 4시, 8시\r\n");
      out.write("	    angles = [-90, 30, 210];\r\n");
      out.write("	  } else if (total === 4) {\r\n");
      out.write("	    // 특별 규칙: 12시, 3시, 6시, 9시\r\n");
      out.write("	    angles = [-90, 0, 90, 180];\r\n");
      out.write("	  } else {\r\n");
      out.write("	    // 일반 규칙: 원을 균등 분할\r\n");
      out.write("	    angles = Array.from({length: total}, (_, i) => -90 + (360 / total) * i);\r\n");
      out.write("	  }\r\n");
      out.write("	\r\n");
      out.write("	  bubbles.forEach((b, i) => {\r\n");
      out.write("	    const deg = b.dataset.angle ? parseFloat(b.dataset.angle) : angles[i];\r\n");
      out.write("	    const rad = deg * Math.PI / 180;\r\n");
      out.write("	\r\n");
      out.write("	    const bw = b.offsetWidth || 140, bh = b.offsetHeight || 140;\r\n");
      out.write("	    const x  = cx + Math.cos(rad) * radius - bw / 2;\r\n");
      out.write("	    const y  = cy + Math.sin(rad) * radius - bh / 2;\r\n");
      out.write("	\r\n");
      out.write("	    b.style.left = x + 'px';\r\n");
      out.write("	    b.style.top  = y + 'px';\r\n");
      out.write("	    b.style.animationDelay = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${0.30 + i * 0.20}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("s`;\r\n");
      out.write("	  });\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    /* 안전 타이밍 배치 */\r\n");
      out.write("    const safePosition = ()=> requestAnimationFrame(positionBubbles);\r\n");
      out.write("\r\n");
      out.write("    /* 상태 리셋(다시 열 때 항상 보이도록) */\r\n");
      out.write("    function resetBubbles(){\r\n");
      out.write("      bubbles.forEach(b=>{\r\n");
      out.write("        b.classList.remove('burst','recharge');\r\n");
      out.write("        b.style.opacity   = 0;\r\n");
      out.write("        b.style.transform = 'translateY(20px) scale(.9)';\r\n");
      out.write("        b.querySelectorAll('.ripple').forEach(r=>r.remove());\r\n");
      out.write("      });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function rechargeBubbles(){\r\n");
      out.write("      bubbles.forEach((b,i)=>{\r\n");
      out.write("        setTimeout(()=>{\r\n");
      out.write("          b.classList.add('recharge');\r\n");
      out.write("          setTimeout(()=> b.classList.remove('recharge'), 800);\r\n");
      out.write("        }, i*150);\r\n");
      out.write("      });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* 열기/닫기 */\r\n");
      out.write("    function openMenuAt(x,y){\r\n");
      out.write("      root.style.setProperty('--cx', x+'px');\r\n");
      out.write("      root.style.setProperty('--cy', y+'px');\r\n");
      out.write("      resetBubbles();\r\n");
      out.write("      safePosition();            // 배치\r\n");
      out.write("      document.body.classList.add('menu-open');\r\n");
      out.write("      trigger.setAttribute('aria-expanded','true');\r\n");
      out.write("      setTimeout(rechargeBubbles, 500);\r\n");
      out.write("    }\r\n");
      out.write("    function closeMenu(){\r\n");
      out.write("      document.body.classList.remove('menu-open');\r\n");
      out.write("      trigger.setAttribute('aria-expanded','false');\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* 클릭 시: 버튼 중심에서 열림(버튼은 항상 화면 중앙) */\r\n");
      out.write("    trigger.addEventListener('click', ()=>{\r\n");
      out.write("      const cx = window.innerWidth  / 2;\r\n");
      out.write("      const cy = window.innerHeight / 2;\r\n");
      out.write("      openMenuAt(cx, cy);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    /* 버블 클릭: ripple + burst + 이동 */\r\n");
      out.write("    bubbles.forEach(b=>{\r\n");
      out.write("      b.addEventListener('click',(e)=>{\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("        const link = b.getAttribute('href');\r\n");
      out.write("        const r    = b.getBoundingClientRect();\r\n");
      out.write("        const x    = e.clientX - r.left;\r\n");
      out.write("        const y    = e.clientY - r.top;\r\n");
      out.write("        const rip  = document.createElement('span');\r\n");
      out.write("        rip.className = 'ripple';\r\n");
      out.write("        const size = Math.max(r.width, r.height) * 1.1;\r\n");
      out.write("        rip.style.width = rip.style.height = size+'px';\r\n");
      out.write("        rip.style.left  = (x-size/2)+'px';\r\n");
      out.write("        rip.style.top   = (y-size/2)+'px';\r\n");
      out.write("        b.appendChild(rip);\r\n");
      out.write("        b.classList.add('burst');\r\n");
      out.write("        setTimeout(()=> window.location.assign(link), 500);\r\n");
      out.write("        setTimeout(()=> rip.remove(), 1000);\r\n");
      out.write("      });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    /* 초기/변경 타이밍에 항상 화면 중앙 기준 재배치 */\r\n");
      out.write("    window.addEventListener('load',  safePosition);\r\n");
      out.write("    window.addEventListener('resize',safePosition);\r\n");
      out.write("    window.addEventListener('scroll',safePosition);\r\n");
      out.write("\r\n");
      out.write("    /* ESC로 닫기 */\r\n");
      out.write("    window.addEventListener('keydown', (e)=>{ if(e.key==='Escape') closeMenu(); });\r\n");
      out.write("  </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
