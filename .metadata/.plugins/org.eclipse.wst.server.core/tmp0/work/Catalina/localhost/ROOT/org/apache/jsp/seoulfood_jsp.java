/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.107
 * Generated at: 2025-08-18 06:11:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class seoulfood_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>서울 맛집 지도</title>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<div>\r\n");
      out.write("    <!-- 메뉴 열기 버튼 -->\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "foodheader.jsp", out, false);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"map\" style=\"width:100%;height:600px;\"></div>\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <form id=\"favForm\" action=\"/addFavoriteProc.jsp\" method=\"post\" style=\"display:none;\">\r\n");
      out.write("        <input type=\"hidden\" id=\"favRestaurantId\" name=\"restaurantId\">\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f32bcf87a6f85ab908ddb72d2f01c85b\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        // ... 기존의 지도 생성 코드 ...\r\n");
      out.write("\r\n");
      out.write("        // 마커와 인포윈도우를 생성하는 부분 (예시: positions 배열을 순회)\r\n");
      out.write("        positions.forEach(function(place) {\r\n");
      out.write("            let marker = new kakao.maps.Marker({\r\n");
      out.write("                map: map,\r\n");
      out.write("                position: new kakao.maps.LatLng(place.lat, place.lng)\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // ★★★★★ 2. 인포윈도우 컨텐츠 구성 ★★★★★\r\n");
      out.write("            let content = '<div class=\"infowindow\">' +\r\n");
      out.write("                          '   <h5>' + place.title + '</h5>' +\r\n");
      out.write("                          '   <p>' + place.address + '</p>';\r\n");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
 if (session.getAttribute("userId") != null) { 
      out.write("\r\n");
      out.write("                // place.id는 식당의 고유 ID라고 가정합니다. JSON 데이터에 id 필드가 있어야 합니다.\r\n");
      out.write("                content += '<button onclick=\"addFavorite(\\'' + place.id + '\\')\">⭐ 즐겨찾기 추가</button>';\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            content += '</div>';\r\n");
      out.write("\r\n");
      out.write("            let infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("                content: content\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // 마커에 클릭 이벤트를 등록합니다\r\n");
      out.write("            kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("                infowindow.open(map, marker);\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // ★★★★★ 3. 즐겨찾기 추가 JavaScript 함수 ★★★★★\r\n");
      out.write("        function addFavorite(restaurantId) {\r\n");
      out.write("            if (confirm(restaurantId + \" 맛집을 즐겨찾기에 추가하시겠습니까?\")) {\r\n");
      out.write("                document.getElementById('favRestaurantId').value = restaurantId;\r\n");
      out.write("                document.getElementById('favForm').submit();\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
