/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-08-18 06:47:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.body;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/chat.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- FontAwesome 아이콘 (이미 로드되어 있지 않은 경우에만) -->\r\n");
      out.write("<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<!-- 채팅 컨테이너 -->\r\n");
      out.write("<div class=\"chat-container\">\r\n");
      out.write("    <!-- 채팅 메뉴 버튼 -->\r\n");
      out.write("    <button class=\"chat-menu-toggle\" onclick=\"toggleChatDrawer()\">\r\n");
      out.write("        <i class=\"fas fa-comment-alt\"></i> 채팅\r\n");
      out.write("    </button>\r\n");
      out.write("\r\n");
      out.write("    <!-- 채팅 오버레이 -->\r\n");
      out.write("    <div class=\"chat-overlay\" id=\"chatOverlay\" onclick=\"closeChatDrawer()\"></div>\r\n");
      out.write("\r\n");
      out.write("    <!-- 채팅 드로어 -->\r\n");
      out.write("    <div class=\"chat-drawer\" id=\"chatDrawer\">\r\n");
      out.write("        <div class=\"chat-drawer-header\">\r\n");
      out.write("            <button class=\"close-chat-drawer\" onclick=\"closeChatDrawer()\">\r\n");
      out.write("                <i class=\"fas fa-times\"></i>\r\n");
      out.write("            </button>\r\n");
      out.write("            <h2><i class=\"fas fa-users\"></i> 채팅 참여</h2>\r\n");
      out.write("            <p>닉네임을 입력하고 채팅을 시작하세요</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("        <div class=\"chat-drawer-content\">\r\n");
      out.write("            <form class=\"chat-form\" onsubmit=\"return false;\">\r\n");
      out.write("                <div class=\"input-group\">\r\n");
      out.write("                    <label for=\"chatId\">\r\n");
      out.write("                        <i class=\"fas fa-user\"></i> 닉네임\r\n");
      out.write("                    </label>\r\n");
      out.write("                    <input \r\n");
      out.write("                        type=\"text\" \r\n");
      out.write("                        id=\"chatId\" \r\n");
      out.write("                        class=\"chat-input\" \r\n");
      out.write("                        placeholder=\"사용할 닉네임을 입력하세요\"\r\n");
      out.write("                        maxlength=\"10\"\r\n");
      out.write("                    >\r\n");
      out.write("                </div>\r\n");
      out.write("                <button type=\"button\" class=\"join-btn\" onclick=\"chatWinOpen()\">\r\n");
      out.write("                    <i class=\"fas fa-sign-in-alt\"></i> 채팅방 입장\r\n");
      out.write("                </button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("// jQuery가 로드되어 있는지 확인\r\n");
      out.write("if (typeof jQuery === 'undefined') {\r\n");
      out.write("    // jQuery가 없으면 CDN에서 로드\r\n");
      out.write("    var script = document.createElement('script');\r\n");
      out.write("    script.src = 'https://code.jquery.com/jquery-3.7.0.min.js';\r\n");
      out.write("    document.head.appendChild(script);\r\n");
      out.write("    \r\n");
      out.write("    script.onload = function() {\r\n");
      out.write("        initializeChatFunctions();\r\n");
      out.write("    };\r\n");
      out.write("} else {\r\n");
      out.write("    // jQuery가 이미 있으면 바로 초기화\r\n");
      out.write("    $(document).ready(function() {\r\n");
      out.write("        initializeChatFunctions();\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function initializeChatFunctions() {\r\n");
      out.write("    // 엔터키로 채팅방 입장\r\n");
      out.write("    $('#chatId').keypress(function(e) {\r\n");
      out.write("        if (e.which === 13) {\r\n");
      out.write("            chatWinOpen();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 입력 시 에러 스타일 제거\r\n");
      out.write("    $('#chatId').on('input', function() {\r\n");
      out.write("        $(this).removeClass('error');\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    // ESC 키로 드로어 닫기\r\n");
      out.write("    $(document).keydown(function(e) {\r\n");
      out.write("        if (e.keyCode === 27) {\r\n");
      out.write("            closeChatDrawer();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function toggleChatDrawer() {\r\n");
      out.write("    var drawer = document.getElementById('chatDrawer');\r\n");
      out.write("    var overlay = document.getElementById('chatOverlay');\r\n");
      out.write("    \r\n");
      out.write("    if (drawer.classList.contains('open')) {\r\n");
      out.write("        closeChatDrawer();\r\n");
      out.write("    } else {\r\n");
      out.write("        drawer.classList.add('open');\r\n");
      out.write("        overlay.classList.add('show');\r\n");
      out.write("        \r\n");
      out.write("        // 포커스를 약간 지연시켜 애니메이션과 겹치지 않도록\r\n");
      out.write("        setTimeout(function() {\r\n");
      out.write("            document.getElementById('chatId').focus();\r\n");
      out.write("        }, 400);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function closeChatDrawer() {\r\n");
      out.write("    var drawer = document.getElementById('chatDrawer');\r\n");
      out.write("    var overlay = document.getElementById('chatOverlay');\r\n");
      out.write("    \r\n");
      out.write("    drawer.classList.remove('open');\r\n");
      out.write("    overlay.classList.remove('show');\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function chatWinOpen() {\r\n");
      out.write("    var idElement = document.getElementById('chatId');\r\n");
      out.write("    var id = idElement.value.trim();\r\n");
      out.write("    \r\n");
      out.write("    if (id === \"\") {\r\n");
      out.write("        alert(\"닉네임을 입력해주세요.\");\r\n");
      out.write("        idElement.focus();\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    if (id.length < 2) {\r\n");
      out.write("        alert(\"닉네임은 2글자 이상 입력해주세요.\");\r\n");
      out.write("        idElement.focus();\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 채팅창 열기 - 경로를 현재 구조에 맞게 수정\r\n");
      out.write("    try {\r\n");
      out.write("        window.open(\r\n");
      out.write("            \"body/ChatWindow.jsp?chatId=\" + encodeURIComponent(id), \r\n");
      out.write("            \"chatWindow\", \r\n");
      out.write("            \"width=420,height=680,resizable=yes,scrollbars=no,status=no,menubar=no,toolbar=no,location=no\"\r\n");
      out.write("        );\r\n");
      out.write("        \r\n");
      out.write("        idElement.value = \"\";\r\n");
      out.write("        closeChatDrawer();\r\n");
      out.write("    } catch (error) {\r\n");
      out.write("        // 팝업이 차단된 경우\r\n");
      out.write("        alert(\"팝업이 차단되었습니다. 브라우저의 팝업 차단을 해제해주세요.\");\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
